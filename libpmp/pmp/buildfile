import intf_libs = Eigen%lib{Eigen}
impl_libs = # Implementation dependencies.

lib{pmp}: libul{pmp}: {hxx cxx}{**} $impl_libs $intf_libs

# Automatic DLL Symbol Exportation on Windows
#
libs{pmp}: def{pmp}: include = ($cxx.target.system == 'win32-msvc')
def{pmp}: libul{pmp}
if ($cxx.target.system == 'mingw32')
  cxx.loptions += -Wl,--export-all-symbols

# Build and Export Options
#
cxx.poptions =+ "-I$src_root"
lib{pmp}:
{
  cxx.export.poptions = "-I$src_root"
  cxx.export.libs = $intf_libs
}

if ($cxx.target.class == 'windows')
{
  cxx.poptions += -D_USE_MATH_DEFINES -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS
  lib{pmp}: cxx.export.poptions += -D_USE_MATH_DEFINES
}

switch $cxx.id
{
  case 'msvc'
    cxx.coptions += /wd4267 /wd4244 /wd4305

  case 'gcc' | 'clang' | 'clang-apple'
    cxx.coptions += -Wno-deprecated-copy -Wno-int-in-bool-context
}

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{pmp}: bin.lib.version = "-$version.project_id"
else
  lib{pmp}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libpmp/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
hxx{*}:
{
  install         = include/pmp/
  install.subdirs = true
}
